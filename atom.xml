<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jose&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhouyanjun.github.io/"/>
  <updated>2017-09-04T16:20:10.000Z</updated>
  <id>http://zhouyanjun.github.io/</id>
  
  <author>
    <name>Jose</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式学习笔记(1)</title>
    <link href="http://zhouyanjun.github.io/2017/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zhouyanjun.github.io/2017/09/04/设计模式/</id>
    <published>2017-09-04T15:52:58.000Z</published>
    <updated>2017-09-04T16:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>首先抽象出类,将<code>Duck</code>这个类抽象出来，但是这个Duck包含fly和quack两种行为，将这两种行为抽象出来两个行为接口<code>FlyBeahviour</code>和<code>QuackBeahviour</code><br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">    FlyBehaviour flyBehaviour;</div><div class="line">    QuackBehaviour quackBehaviour;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//委托行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</div><div class="line">        flyBehaviour.fly();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//委托行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</div><div class="line">        quackBehaviour.quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"All ducks float,even decoys"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehaviour</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehaviour</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来实现两种行为接口，包括它对于这种行为的不同方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm flying!!!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I can't fly"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Quack"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&lt;&lt; Silence &gt;&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Squeak"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将这些整合起来实现一个<code>MallardDuck</code>类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</div><div class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</div><div class="line">        flyBehaviour = <span class="keyword">new</span> FlyWithWings();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'am a real Mallard Duck"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSImulator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</div><div class="line">        mallard.performFly();</div><div class="line">        mallard.performQuack();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="/images/屏幕快照 2017-09-04 下午8.44.14.png" alt="Alt text"><br>我们现在尝试动态的设定行为，通过“设定方法(setter method)”，二不是在鸭子的构造器内部实例化<br>我们现在<code>Duck</code>类中，加入两个新方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehaviour</span><span class="params">(FlyBehaviour flyBehaviour)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.flyBehaviour = flyBehaviour;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehaviour</span><span class="params">(QuackBehaviour quackBehaviour)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.quackBehaviour = quackBehaviour;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>制造一个新的鸭子模型：鸭模型(ModelDuck)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDcuk</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDcuk</span><span class="params">()</span> </span>&#123;</div><div class="line">        flyBehaviour = <span class="keyword">new</span> FlyNoWay();</div><div class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm a model duck"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立一个新的行为<code>FlyRocketPowered</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm flying with a rocket"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们在测试方法<code>MiniDuckSImulator</code>中添加以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Duck model = <span class="keyword">new</span> ModelDcuk();</div><div class="line">model.performFly();</div><div class="line">model.setFlyBehaviour(<span class="keyword">new</span> FlyRocketPowered());</div><div class="line">model.performFly();</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="/images/屏幕快照 2017-09-04 下午9.07.26.png" alt="Alt text"><br>可以看到原来的一个鸭子的行为在运行时被改变了<br><strong>策略模式</strong>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的用户</p>
<h4 id="观察者（Observe）模式"><a href="#观察者（Observe）模式" class="headerlink" title="观察者（Observe）模式"></a>观察者（Observe）模式</h4><p>出版社+订阅者=观察者模式<br>首先我们抽象出主题(<code>Subject</code>)接口，观察者(<code>Observer</code>)接口和显示(<code>DisplayElement</code>)接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//注册一个观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="comment">//移除一个观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="comment">//通知一个观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp,<span class="keyword">float</span> humidity,<span class="keyword">float</span> pressure)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现一个<code>WeatherData</code>的主题类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList observers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">        observers =  <span class="keyword">new</span> ArrayList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当注册观察者时，我们只需要把它加到ArrayList中即可</div><div class="line">     * <span class="doctag">@param</span> o</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        observers.add(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 同样地，当观察者想取消注册，把它从ArrayList中删除即可</div><div class="line">     * <span class="doctag">@param</span> o</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</div><div class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>) observers.remove(i);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知所有观察者</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observers.size(); i++) &#123;</div><div class="line">            Observer observer = (Observer)observers.get(i);</div><div class="line">            observer.update(temperature,humidity,pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当气象站更新时，通知所有观察者</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span></span>&#123;</div><div class="line">        notifyObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> humidity,<span class="keyword">float</span> pressure)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">        measurementsChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来创建一个布告板来显示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>,<span class="title">DisplayElement</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> Subject weatherData;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 把它注册到主题类中</div><div class="line">     * <span class="doctag">@param</span> weatherData</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.weatherData = weatherData;</div><div class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temp;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Current conditions:"</span> + temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</div><div class="line"></div><div class="line">        CurrentConditionsDisplay currentDisply =  <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">        weatherData.setMeasurements(<span class="number">80</span>,<span class="number">65</span>,<span class="number">30.4f</span>);</div><div class="line">        weatherData.setMeasurements(<span class="number">82</span>,<span class="number">70</span>,<span class="number">29.2f</span>);</div><div class="line">        weatherData.setMeasurements(<span class="number">78</span>,<span class="number">90</span>,<span class="number">29.2f</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="/images/屏幕快照 2017-09-04 下午10.27.33.png" alt="Alt text"><br><strong>使用java内置的观察者模式</strong><br>Java API有内置的观察者模式，java.util包 内置包含基本的<code>Observer</code>接口与<code>Observable</code>类，这和我们的<code>Suject</code>接口与<code>Observer</code>接口相似<br><strong>把对象变成观察者</strong><br>实现观察者接口(java.util.Observer)，然后调用任何<code>Observable</code>对象的<code>addObserver()</code>方法。不想再当观察者时，就调用<code>deleteObserver()</code>方法<br><strong>观察者如何送出通知</strong><br>首先利用java.util.Observable接口产生”可观察者”类<br>先调用<code>setChanged()</code>方法，标记状态已经改变的事实<br>然后调用两种<code>notifyObservers</code>方法中的一个</p>
<ul>
<li><code>notifyObservers()</code></li>
<li><code>notifyObservers(Object arg)</code><br><strong>观察者如何接受通知</strong><br>观察者实现了更新方法，但是方法的签名不太一样<code>update(Observable o,Object arg)</code><br><code>Observable o</code>主题本身是一个变量，好让观察者知道是哪个主题通知它<br><code>Object arg</code>是传入<code>notifyObservers()</code>的数据对象，如果没有说明为空<br><strong>使用内置的支持重做气象站</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span></span>&#123;</div><div class="line">        setChanged();</div><div class="line">        notifyObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> humidity,<span class="keyword">float</span> pressure)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">        measurementsChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> temperature;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> humidity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pressure;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</div><div class="line">    Observable observable;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Observable observable)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.observable = observable;</div><div class="line">        observable.addObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable obs,Object arg)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(obs <span class="keyword">instanceof</span> WeatherData)&#123;</div><div class="line">            WeatherData weatherData = (WeatherData)obs;</div><div class="line">            <span class="keyword">this</span>.temperature = weatherData.getTemperature();</div><div class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</div><div class="line">            display();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Current conditions:"</span> + temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="装饰者-decorate-模式"><a href="#装饰者-decorate-模式" class="headerlink" title="装饰者(decorate)模式"></a>装饰者(decorate)模式</h4><ul>
<li>装饰者和被装饰对象有相同的超类</li>
<li>你可以用一个或多个装饰者包装一个对象</li>
<li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象(被包装的)场合，可以用装饰过的对象代替它</li>
<li>装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的</li>
<li>对象可以在任何时候被装饰，所以可以再运行时动态地，不限量地用你喜欢的装饰者来装饰对象<br><img src="/images/IMG_9784.JPG" alt="Alt text"><br><img src="/images/IMG_1987.JPG" alt="Alt text"><br>首先抽象出饮料这个抽象类<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">    String description = <span class="string">"Unknown Beverage"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后抽象出调料(Condiment)这装饰器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来实现一些咖啡类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DarkRoast</span><span class="params">()</span> </span>&#123;</div><div class="line">        description = <span class="string">"DarkRoast"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">99</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</div><div class="line">        description = <span class="string">"Espresso"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</div><div class="line">        description = <span class="string">"House Blend Coffee"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">89</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再实现一些调料的装饰器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line">    Beverage beverage;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beverage = beverage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">",Mocha"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">20</span> + beverage.cost();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line">    Beverage beverage;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beverage = beverage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">",Whip"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">1</span> + beverage.cost();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbucksCoffee</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</div><div class="line">        System.out.println(beverage.getDescription() + <span class="string">" $"</span> + beverage.cost());</div><div class="line"></div><div class="line">        Beverage beverage2 = <span class="keyword">new</span> DarkRoast();</div><div class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</div><div class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</div><div class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</div><div class="line">        System.out.println(beverage2.getDescription() + <span class="string">" $"</span> + beverage2.cost());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="/images/屏幕快照 2017-09-04 下午11.38.11.png" alt="Alt text"><br><strong>Java中的装饰者模式的应用 Java I/O</strong><br><img src="/images/IMG_0427.JPG" alt="Alt text"><br><img src="/images/IMG_0621.JPG" alt="Alt text"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h4&gt;&lt;p&gt;首先抽象出类,将&lt;code&gt;Duck&lt;/code&gt;这个类抽象出来，但是这个Duck包含fly和quack两种行为，将这两种行为抽象出来两个行为接口&lt;code&gt;FlyBeahviour&lt;/code&gt;和&lt;code&gt;QuackBeahviour&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://zhouyanjun.github.io/categories/Java/"/>
    
    
      <category term="strategy" scheme="http://zhouyanjun.github.io/tags/strategy/"/>
    
      <category term="observe" scheme="http://zhouyanjun.github.io/tags/observe/"/>
    
      <category term="decorate" scheme="http://zhouyanjun.github.io/tags/decorate/"/>
    
  </entry>
  
  <entry>
    <title>关于UnsupportedOperationException异常</title>
    <link href="http://zhouyanjun.github.io/2017/07/31/%E5%85%B3%E4%BA%8EUnsupportedOperationException%E5%BC%82%E5%B8%B8/"/>
    <id>http://zhouyanjun.github.io/2017/07/31/关于UnsupportedOperationException异常/</id>
    <published>2017-07-31T05:42:20.000Z</published>
    <updated>2017-07-31T05:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>在遍历Collection时，若想对其进行删除操作，必须使用Iterator中的remove()方法，若使用Collection自带的remove()方法，则会产生<strong>currentModifierException</strong>,在下面这段代码中，会出现<strong>UnsupportedOperationException</strong>异常，Java中提供了这个方法，为什么还会抛出异常呢？<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">        List&lt;Integer&gt; list1 = Arrays.asList(array);</div><div class="line">        Iterator&lt;Integer&gt; iterator1 = list1.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> x = iterator1.next();</div><div class="line">            <span class="keyword">if</span>(x==<span class="number">5</span>)&#123;</div><div class="line">                iterator1.remove();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(list1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Exception in thread “main” java.lang.UnsupportedOperationException<br>    at java.util.AbstractList.add(AbstractList.java:148)<br>    at java.util.AbstractList.add(AbstractList.java:108)<br>    at java.util.AbstractCollection.addAll(AbstractCollection.java:344)<br>    at Test.main(Test.java:10)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</p>
</blockquote>
<p>我们可以观察到其主要问题出现在代码的第9行也就是删除操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">@SafeVarargs</span></div><div class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * <span class="doctag">@serial</span> include</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">       <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div><div class="line">   &#123;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</div><div class="line"></div><div class="line">       ArrayList(E[] array) &#123;</div><div class="line">           a = Objects.requireNonNull(array);</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Arrays.asList(T...a)</code>返回的是一个内部类的<code>ArrayList&lt;&gt;(a)</code>;而不是<strong>List</strong>的子类<strong>ArrayList</strong>；而且其保存的是一个<strong>final</strong>对象，所以不能对其进行删除操作。当我们采用另一种将数组变成<strong>List</strong>对象时才可以使用<strong>Iterator</strong>的<strong>remove()</strong>方法去删除元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">        List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list2.addAll(Arrays.asList(array));</div><div class="line">        Iterator&lt;Integer&gt; iterator2 = list2.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator2.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> x = iterator2.next();</div><div class="line">            <span class="keyword">if</span>(x==<span class="number">5</span>)&#123;</div><div class="line">                iterator2.remove();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(list2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在遍历Collection时，若想对其进行删除操作，必须使用Iterator中的remove()方法，若使用Collection自带的remove()方法，则会产生&lt;strong&gt;currentModifierException&lt;/strong&gt;,在下面这段代码中，会出现&lt;strong&gt;UnsupportedOperationException&lt;/strong&gt;异常，Java中提供了这个方法，为什么还会抛出异常呢？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://zhouyanjun.github.io/categories/Java/"/>
    
    
      <category term="UnsupportedOperationException" scheme="http://zhouyanjun.github.io/tags/UnsupportedOperationException/"/>
    
      <category term="Collection" scheme="http://zhouyanjun.github.io/tags/Collection/"/>
    
      <category term="Arrays" scheme="http://zhouyanjun.github.io/tags/Arrays/"/>
    
  </entry>
  
  <entry>
    <title>再见2016</title>
    <link href="http://zhouyanjun.github.io/2016/12/31/%E5%86%8D%E8%A7%812016/"/>
    <id>http://zhouyanjun.github.io/2016/12/31/再见2016/</id>
    <published>2016-12-31T11:56:41.000Z</published>
    <updated>2016-12-31T12:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实对于我这种懒人并没有给自己写总结的习惯，但是今年对我来说又有着特殊意义的一年，如果说2015对我来说只有考研这一件事，2016应该是我人生的一个转折点。<br><a id="more"></a></p>
<h3 id="January"><a href="#January" class="headerlink" title="January"></a>January</h3><p>本来觉得刚考完研就被学校拖出来实习是一件很苦逼的事情，但是感谢你们，狼人杀小分队，让我们在动漫基地的过的有声有色。</p>
<h3 id="February"><a href="#February" class="headerlink" title="February"></a>February</h3><p>新年的喜悦，和等待成绩的煎熬，总归没有辜负自己2015年一年的努力，顺利的通过了初试。</p>
<h3 id="March"><a href="#March" class="headerlink" title="March"></a>March</h3><p>复试+足协杯，喜忧参半，复试成功，但是我却输掉了半决赛，卫冕失败，想最后用一个冠军来告别我本科的足球生涯，但是生活就是这样，不会都如你意。</p>
<h3 id="April"><a href="#April" class="headerlink" title="April"></a>April</h3><p>我真的想不起来我四月干了什么。论文，毕业设计？</p>
<h3 id="May"><a href="#May" class="headerlink" title="May"></a>May</h3><p>毕业季，喝酒，喝酒，还是喝酒。告别自己的大学生涯，感谢大学四年遇到你们，院队，校队，骑行社，6栋125，12网工。</p>
<h3 id="June"><a href="#June" class="headerlink" title="June"></a>June</h3><p>欧洲杯，球迷的狂欢，加上收到了录取通知书，整个这个月都是high到不行。</p>
<h3 id="July"><a href="#July" class="headerlink" title="July"></a>July</h3><p>拿到了自己的毕业证学位证，大家真的是要各奔前程。恭喜葡萄牙夺冠，小组第三出线，常规时间只赢过一场球，但这又何妨，天道酬勤。</p>
<h3 id="August"><a href="#August" class="headerlink" title="August"></a>August</h3><p>杭州，西塘，说走就走，亦可赛艇的夜晚，不可描述的老司机。</p>
<h3 id="September"><a href="#September" class="headerlink" title="September"></a>September</h3><p>研究生入学，第一次来苏州，迎接新的挑战。</p>
<h3 id="October"><a href="#October" class="headerlink" title="October"></a>October</h3><p>渐渐习惯了研究生的生活，认识了更多的朋友，长了更多的见识。壮士仍需努力啊。</p>
<h3 id="November"><a href="#November" class="headerlink" title="November"></a>November</h3><p>灰色，祝你幸福。</p>
<h3 id="December"><a href="#December" class="headerlink" title="December"></a>December</h3><p>坎坷的十二月，各种事情蜂拥而至，索性也都熬过去了，确定了自己研究生下一阶段的目标。</p>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><p>希望自己可以找到一个好的实习，身体健康，一切都顺利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实对于我这种懒人并没有给自己写总结的习惯，但是今年对我来说又有着特殊意义的一年，如果说2015对我来说只有考研这一件事，2016应该是我人生的一个转折点。&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://zhouyanjun.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://zhouyanjun.github.io/tags/life/"/>
    
  </entry>
  
</feed>
